package com.monetary.transfer.models;

import com.monetary.transfer.exceptions.IntegrityException;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.Synchronized;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import java.math.BigDecimal;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Supplier;

/**
 * Bank account model.
 */
@Data
@Builder
@AllArgsConstructor
public class Account {
    /**
     * Basic Bank Account Number (also known as BBAN).
     *
     * <p>The account number is considered as as string containing numbers and
     * must consist of at least eight characters.
     */
    @NotNull(message = "error.account.number.required")
    @Pattern(regexp = "^\\d{8,}$", message = "error.account.number.invalid")
    private String number;

    /**
     * Account balance.
     */
    private AtomicReference<BigDecimal> balance;

    public Account() {
        balance = new AtomicReference<>(BigDecimal.ZERO);
    }

    /**
     * Returns current bank account balance;
     *
     * @return balance value
     */
    public BigDecimal getBalance() {
        return balance.get();
    }

    /**
     * Sets bank account balance to provided value.
     *
     * @param value new value of the bank account balance
     */
    public void setBalance(BigDecimal value) {
        balance.set(value);
    }

    /**
     * Conduct account balance check.
     *
     * @param value required balance
     * @throws IntegrityException if current account balance is less then
     * {@code value}.
     */
    void requireBalance(BigDecimal value) {
        if (value.compareTo(balance.get()) > 0) {
            throw new IntegrityException("error.account.amount");
        }
    }

    /**
     * Increases the account balance by provided value.
     *
     * @param value value for balance to deposit
     */
    @Synchronized
    void deposit(BigDecimal value) {
        balance.updateAndGet(x -> x.add(value));
    }

    /**
     * Decreases the account balance by provided value.
     *
     * @param value value for balance to deposit
     */
    @Synchronized
    void withdraw(BigDecimal value) {
        balance.updateAndGet(x -> x.subtract(value));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode() {
        return number.hashCode();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(Object obj) {
        return  this == obj || (obj instanceof Account && obj.hashCode() == hashCode());
    }

    /**
     * Extended behaviour for the builder class generated by the Lombok.
     */
    public static class AccountBuilder {

        public AccountBuilder() {
            balance = new AtomicReference<>(BigDecimal.ZERO);
        }

        AccountBuilder balance(BigDecimal balance) {
            this.balance.set(balance);
            return this;
        }

        public AccountBuilder balance(Supplier<BigDecimal> balanceSupplier) {
            return balance(balanceSupplier.get());
        }

        AccountBuilder number(String number) {
            this.number = number;
            return this;
        }

        public AccountBuilder number(Supplier<String> numberSupplier) {
            return number(numberSupplier.get());
        }
    }
}
